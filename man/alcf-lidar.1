.\" generated with Ronn-NG/v0.9.1
.\" http://github.com/apjanke/ronn-ng/tree/0.9.1
.TH "ALCF\-LIDAR" "1" "February 2025" ""
.SH "NAME"
\fBalcf\-lidar\fR \- Process lidar data\.
.SH "SYNOPSIS"
.nf
alcf lidar <type> [<options>] [<algorithm_options>] [\-\-] <lidar> <output>
.fi
.SH "DESCRIPTION"
The processing is done in the following order:
.IP "\[ci]" 4
noise removal
.IP "\[ci]" 4
calibration
.IP "\[ci]" 4
time resampling
.IP "\[ci]" 4
height resampling
.IP "\[ci]" 4
cloud detection
.IP "\[ci]" 4
cloud base detection
.IP "" 0
.P
Arguments following \fB\-\-\fR are treated as literal strings\. Use this delimiter if the input or output file names might otherwise be interpreted as non\-strings, e\.g\. purely numerical file names\.
.SH "ARGUMENTS"
.TP
\fBtype\fR
Lidar type (see Types below)\.
.TP
\fBlidar\fR
Input lidar data directory or filename\. If a directory, only \fB\.nc\fR files in the directory are processed\. If the option \fB\-r\fR is supplied, the directory is processed recursively\.
.TP
\fBoutput\fR
Output filename or directory\.
.TP
\fBoptions\fR
See Options below\.
.TP
\fBalgorithm_options\fR
See Algorithm options below\.
.SH "TYPES"
.TP
\fBblview\fR
Vaisala BL\-VIEW L2 product\.
.TP
\fBchm15k\fR
Lufft CHM 15k\.
.TP
\fBct25k\fR
Vaisala CT25K\.
.TP
\fBcl31\fR
Vaisala CL31\.
.TP
\fBcl51\fR
Vaisala CL51\.
.TP
\fBcl61\fR
Vaisala CL61\.
.TP
\fBcn_chm15k\fR
Cloudnet Lufft CHM 15k\.
.TP
\fBcn_ct25k\fR
Cloudnet Vaisala CT25K\.
.TP
\fBcn_cl31\fR
Cloudnet Vaisala CL31\.
.TP
\fBcn_cl51\fR
Cloudnet Vaisala CL51\.
.TP
\fBcn_cl61\fR
Cloudnet Vaisala CL61\.
.TP
\fBcn_minimpl\fR
Cloudnet Sigma Space MiniMPL\.
.TP
\fBcosp\fR
COSP simulated lidar\.
.TP
\fBdefault\fR
The same format as the output of \fBalcf lidar\fR\.
.TP
\fBminimpl\fR
Sigma Space MiniMPL (converted via SigmaMPL)\.
.TP
\fBmpl\fR
Sigma Space MPL (converted via SigmaMPL)\.
.TP
\fBmpl2nc\fR
Sigma Space MPL and MiniMPL (converted via mpl2nc)\.
.SH "OPTIONS"
.IP "\[ci]" 4
\fBalign_output: <value>\fR: Align output time periods to the nearest multiple of output_sampling\. Default: \fBtrue\fR\.
.IP "\[ci]" 4
\fBaltitude: <altitude>\fR: Altitude of the instrument (m)\. Default: Taken from lidar data or \fB0\fR if not available\. If defined, the values in the input data is overriden\.
.IP "\[ci]" 4
\fBbsd: <value>\fR: Assume a given standard deviation of backscatter noise when detecting clouds or \fBnone\fR to use the value calculated by the noise removal algorithm from observed backscatter if available (m^\-1\.sr^\-1)\. The value applies at height \fBbsd_z\fR and is range\-scaled for other heights\. A suitable value can be taken from a plot generated by \fBalcf plot backscatter_sd_hist\fR\. Default: \fBnone\fR\.
.IP "\[ci]" 4
\fBbsd_z: <value>\fR: Height at which \fBbsd\fR applies (m)\. Default: \fB8000\fR\.
.IP "\[ci]" 4
\fBcalibration: <algorithm>\fR: Backscatter calibration algorithm\. Available algorithms: \fBdefault\fR, \fBnone\fR\. Default: \fBdefault\fR\.
.IP "\[ci]" 4
\fBcouple: <directory>\fR: Couple to other lidar data\. Default: \fBnone\fR\.
.IP "\[ci]" 4
\fBcl_crit_range: <range>\fR: Critical range for the \fBfix_cl_range\fR option (m)\. Default: 6000\.
.IP "\[ci]" 4
\fBcloud_detection: <algorithm>\fR: Cloud detection algorithm\. Available algorithms: \fBdefault\fR, \fBnone\fR\. Default: \fBdefault\fR\.
.IP "\[ci]" 4
\fBcloud_base_detection: <algorithm>\fR: Cloud base detection algorithm\. Available algorithms: \fBdefault\fR, \fBnone\fR\. Default: \fBdefault\fR\.
.IP "\[ci]" 4
\fB\-\-fix_cl_range\fR: Fix CL31/CL51 range correction (if \fBnoise_h2\fR firmware option if off)\. The critical range is taken from \fBcl_crit_range\fR\.
.IP "\[ci]" 4
\fBinterp: <value>\fR: Vertical interpolation method\. \fBarea_block\fR for area\-weighting with block interpolation, \fBarea_linear\fR for area\-weighting with linear interpolation or \fBlinear\fR for simple linear interpolation\. Default: \fBarea_linear\fR\.
.IP "\[ci]" 4
\fBkeep_vars: { <\|\.\|\.\|\. }\fR: Keep the listed input variables\. The variable must be numerical and have a time dimension\. The variable is resampled in the same way as backscatter along their time and level dimensions\. The data type is changed to float64\. Its name is prefixed with \fBinput_\fR, except for type \fBdefault\fR, in which it is expected to be already prefixed in the input\. When processing \fBalcf simulate\fR output, the variables need to be kept by the model reading module (by changing the code) and by \fBalcf simulate\fR (by using the keep_vars option)\. Default: \fB{ }\fR\.
.IP "\[ci]" 4
\fBlat: <lat>\fR: Latitude of the instrument (degrees North)\. Default: Taken from lidar data or \fBnone\fR if not available\. If defined, the values in the input data is overriden\.
.IP "\[ci]" 4
\fBlon: <lon>\fR: Longitude of the instrument (degrees East)\. Default: Taken from lidar data or \fBnone\fR if not available\. If defined, the values in the input data is overriden\.
.IP "\[ci]" 4
\fBnoise_removal: <algorithm>\fR: Noise removal algorithm\. Available algorithms: \fBdefault\fR, \fBnone\fR\. Default: \fBdefault\fR\.
.IP "\[ci]" 4
\fBoutput_sampling: <period>\fR: Output sampling period (seconds)\. Default: \fB86400\fR (24 hours)\.
.IP "\[ci]" 4
\fB\-r\fR: Process the input directory recursively\.
.IP "\[ci]" 4
\fBtime: { <low> <high> }\fR: Time limits (see Time format below)\. Default: \fBnone\fR\.
.IP "\[ci]" 4
\fBtrack: <file>\fR, \fBtrack: { <file>\|\.\|\.\|\. }\fR: One or more track NetCDF files (see Files below)\. Longitude and latitude is assigned to the profiles based on the track and profile time\. If multiple files are supplied and \fBtime_bnds\fR is not present in the files, they are assumed to be multiple segments of a discontinous track unless the last and first time of adjacent tracks are the same\. \fBtrack\fR takes precedence over \fBlat\fR and \fBlon\fR\. Default: \fBnone\fR\.
.IP "\[ci]" 4
\fBtrack_gap: <interval>\fR: If the interval is not 0, a track file is supplied, the \fBtime_bnds\fR variable is not defined in the file and any two adjacent points are separated by more than the specified time interval (seconds), then a gap is assumed to be present between the two data points, instead of interpolating location between the two points\. Default: \fB21600\fR (6 hours)\.
.IP "\[ci]" 4
\fBtres: <tres>\fR: Time resolution (seconds)\. Default: \fB300\fR (5 min)\.
.IP "\[ci]" 4
\fBtshift: <tshift>\fR: Time shift (seconds)\. Default: \fB0\fR\.
.IP "\[ci]" 4
\fBzlim: { <low> <high> }\fR: Height limits (m)\. Default: \fB{ 0 15000 }\fR\.
.IP "\[ci]" 4
\fBzres: <zres>\fR: Height resolution (m)\. Default: \fB50\fR\.
.IP "" 0
.SH "CLOUD DETECTION OPTIONS"
.TP
\fBdefault\fR
Cloud detection based on backscatter threshold\.
.TP
\fBnone\fR
Disable cloud detection\.
.SH "CLOUD DETECTION DEFAULT OPTIONS"
.TP
\fBcloud_nsd: <n>\fR
Number of noise standard deviations to subtract\. Default: \fB5\fR\.
.TP
\fBcloud_threshold: <threshold>\fR
Cloud detection threshold (m^\-1\.sr^\-1)\. Default: \fB2e\-6\fR\.
.TP
\fBcloud_threshold_exp: { <x> <y> <h> }\fR
Cloud detection threshold exponentially decaying with height (sr^\-1\.m^\-1)\. If not \fBnone\fR, this supersedes \fBcloud_threshold\fR\. The threshold is \fB<x>\fR at surface level, decaying exponentially to \fB<y>\fR at infinite height with half\-height \fB<h>\fR\. Default: \fBnone\fR\.
.SH "CLOUD BASE DETECTION OPTIONS"
.TP
\fBdefault\fR
Cloud base detection based cloud mask produced by the cloud detection algorithm\.
.TP
\fBnone\fR
Disable cloud base detection\.
.SH "CALIBRATION OPTIONS"
.TP
\fBdefault\fR
Multiply backscatter by a calibration coefficient\.
.TP
\fBnone\fR
Disable calibration\.
.SH "CALIBRATION DEFAULT OPTIONS"
.TP
\fBcalibration_file: <file>\fR
Calibration file\.
.SH "NOISE REMOVAL OPTIONS"
.TP
\fBdefault\fR
Noise removal based on noise distribution on the highest level\.
.TP
\fBnone\fR
Disable noise removal\.
.SH "NOISE REMOVAL DEFAULT OPTIONS"
.IP "\[ci]" 4
\fBnoise_removal_sampling: <period>\fR: Sampling period for noise removal (seconds)\. Default: 300\.
.IP "\[ci]" 4
\fBnear_noise: { <scale> <range> }\fR : Assume additional exponentially\-decaying near\-range noise\. The first argument is the value at zero range (sr^\-1\.m^\-1)\. The second argument is range at which the function decays to a half (m)\. Default: \fB{ 0 0 }\fR\.
.IP "" 0
.SH "TIME FORMAT"
\fBYYYY\-MM\-DD[THH:MM[:SS]]\fR, where \fBYYYY\fR is year, \fBMM\fR is month, \fBDD\fR is day, \fBHH\fR is hour, \fBMM\fR is minute, \fBSS\fR is second\. Example: \fB2000\-01\-01T00:00:00\fR\.
.SH "FILES"
The track file is a NetCDF file containing 1D variables \fBlon\fR, \fBlat\fR, \fBtime\fR, and optionally \fBtime_bnds\fR\. \fBtime\fR and \fBtime_bnds\fR are time in format conforming with the CF Conventions (has a valid \fBunits\fR attribute and optional \fBcalendar\fR attribute), \fBlon\fR is longitude between 0 and 360 degrees and \fBlat\fR is latitude between \-90 and 90 degrees\. If \fBtime_bnds\fR is provided, discontinous track segments can be specified if adjacent time bounds are not coincident\. The variables \fBlon\fR, \fBlat\fR and \fBtime\fR have a single dimension \fBtime\fR\. The variable \fBtime_bnds\fR has dimensions (\fBtime\fR, \fBbnds\fR)\.
.SH "EXAMPLES"
Process Vaisala CL51 data in \fBcl51_nc\fR and store the output in \fBcl51_alcf_lidar\fR, assuming instrument altitude of 100 m above sea level\.
.IP "" 4
.nf
alcf lidar cl51 cl51_nc cl51_alcf_lidar altitude: 100
.fi
.IP "" 0
.SH "COPYRIGHT"
Copyright \(co 2019â€“2024 Peter Kuma, Adrian J\. McDonald, Olaf Morgenstern, Richard Querel, Israel Silber and Connor J\. Flynn\.
.SH "BUG REPORTING"
Report bugs to Peter Kuma (\fIpeter@peterkuma\.net\fR)\.
.SH "SEE ALSO"
alcf(1), alcf\-auto(1), alcf\-calibrate(1), alcf\-compare(1), alcf\-convert(1), alcf\-download(1), alcf\-model(1), alcf\-plot(1), alcf\-simulate(1), alcf\-stats(1)
